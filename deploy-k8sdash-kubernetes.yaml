apiVersion: v1
kind: Namespace
metadata:
  name: k8s-dash
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-dash-api-svc-acc
  namespace: k8s-dash
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: serviceaccount-k8sdash-nodes-cluster-role
  namespace: k8s-dash
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: serviceaccount-k8sdash-nodes-cluster-role-binding
  namespace: k8s-dash
subjects:
- kind: ServiceAccount
  name: k8s-dash-api-svc-acc
  namespace: k8s-dash
roleRef:
  kind: ClusterRole
  name: serviceaccount-k8sdash-nodes-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: serviceaccount-k8sdash-nodes-role-binding
  namespace: k8s-dash
subjects:
- kind: ServiceAccount
  name: k8s-dash-api-svc-acc
  namespace: k8s-dash
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: serviceaccount-k8sdash-view-cluster-role-binding
  namespace: k8s-dash
subjects:
- kind: ServiceAccount
  name: k8s-dash-api-svc-acc
  namespace: k8s-dash
roleRef:
  kind: ClusterRole
  name: view
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: k8s-dash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-dash-app
      tier: backend
  template:
    metadata:
      labels:
        app: k8s-dash-app
        tier: backend
    spec: 
      serviceAccountName: k8s-dash-api-svc-acc
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: k8s-dash-api
        image: k8sdash/k8s-dashboard-api:v0.5.6
        resources:
          requests:
            cpu: 250m
          limits:
            cpu: 500m
            memory: 512Mi  
        ports:
        - containerPort: 80
          name: k8s-dash-app
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: k8s-dash
spec:
  type: LoadBalancer
  ports:
  - name: http
    targetPort: 80
    port: 5184
  selector:
    app: k8s-dash-app
    tier: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: k8s-dash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-dash-app
      tier: frontend
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5 
  template:
    metadata:
      labels:
        app: k8s-dash-app
        tier: frontend
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: k8s-dash-client
        image: k8sdash/k8s-dashboard-client:v0.5.5
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: 250m
          limits:
            cpu: 500m
            memory: 512Mi  
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: k8s-dash
spec:
  type: LoadBalancer
  ports:
  - name: http
    targetPort: 80
    port: 3009
  selector:
    app: k8s-dash-app
    tier: frontend
---  
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: k8s-dash
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  tls:
  - hosts:
    - k8s.example.com
    secretName: k8s-tls-secret
  rules:
  - host: k8s.example.com
    http:
      paths:   
      - path: /(api|hubs|swagger)/(.*)
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 80   
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 3009  